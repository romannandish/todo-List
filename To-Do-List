# todo-List
using Html, Tailwind css , and react

import React, { useState, useEffect, useRef } from "react";
import NavBar from "./components/NavBar";
import { v4 as uuidv4 } from "uuid";

function App() {
  const [todo, setTodo] = useState("");
  const [todos, setTodos] = useState([]);
  const [showFinished, setshowFinished] = useState(false);

  useEffect(() => {
    let todoString = localStorage.getItem("todos");
    if (todoString) {
      let todos = JSON.parse(localStorage.getItem("todos"));
      setTodos(todos);
    }
  }, []);

  useEffect(() => {
    if (todos.length > 0) {
      localStorage.setItem("todos", JSON.stringify(todos));
    }
  }, [todos]);

  const handleAdd = () => {
    setTodos([...todos, { id: uuidv4(), todo, isCompleted: false }]);
    setTodo("");
    console.log(todos);
  };

  const toggleFinished = (e) => {
    setshowFinished(!showFinished);
  };

  const handleCheckbox = (e) => {
    let id = e.target.name;
    let index = todos.findIndex((item) => {
      return item.id === id;
    });
    let newTodos = [...todos];
    newTodos[index].isCompleted = !newTodos[index].isCompleted;
    setTodos(newTodos);
  };

  const handleEdit = (e, id) => {
    let t = todos.filter((item) => {
      return item.id === id;
    });
    setTodo(t[0].todo);
    let newTodos = todos.filter((item) => {
      return item.id !== id;
    });
    setTodos(newTodos);
  };

  const handleDelete = (e, id) => {
    let newTodos = todos.filter((item) => {
      return item.id !== id;
    });
    setTodos(newTodos);
  };

  const handleChange = (e) => {
    setTodo(e.target.value);
  };

  return (
    <>
      <NavBar />
       <div className="mx-3 md:container md:mx-auto my-5 rounded-xl p-5 bg-violet-100 min-h-[80vh] md:w-[35%]">
        <div className="content md:text-2xl font-bold text-black sm:text-sm">To-Do-List</div>
        <div className="search active:border-none ">
          <input
            onChange={handleChange}
            value={todo}
            type="text"
            placeholder="Add your task"
            className="w-[75%] p-4 my-5 rounded-s-full focus:outline-none "
          ></input>
          <button
            onClick={handleAdd}
            disabled={todo.length <= 3}
            className="w-[25%] p-4 bg-pink-600  disabled:bg-gray-600 rounded-e-full text-white font-bold "
          >
            ADD
          </button>
        </div>
        <span className="font-light text-sm space-x-3">
          <input
            className="my-4"
            id="show"
            onChange={toggleFinished}
            type="checkbox"
            checked={showFinished}
          />
          <span>Show Finished</span>
        </span>
        {todos.length === 0 && (
          <div className="text-xl flex justify-center my-6 font-semibold">
            - Nothing to display
          </div>
        )}
        {todos.map((item) => {
          return (
            (showFinished || !item.isCompleted) && (
              <div
                key={item.id}
                className="thingsToDo flex flex-wrap  justify-between items-center gap-4 my-5 bg-[#3A6D8C] p-6 text-[#FCFAEE] rounded-xl shadow-lg hover:shadow-2xl transition-shadow duration-300 ease-in-out"
              >
                {/* Checkbox */}
                <input
                  type="checkbox"
                  onChange={handleCheckbox}
                  name={item.id}
                  checked={item.isCompleted}
                  id="agree"
                  className="w-8 h-8 rounded-full"
                />

                {/* Todo Text */}
                <div
                  className={`flex-1 ${
                    item.isCompleted ? "line-through" : ""
                  } break-words overflow-hidden`}
                >
                  {item.todo}
                </div>

                {/* Buttons */}
                <div className="flex gap-4 w-full md:w-auto md:flex-none">
                  <button
                    onClick={(e) => handleEdit(e, item.id)}
                    className="edit px-4 py-2 bg-[#EAD8B1] hover:bg-[#d9c297] text-[#3A6D8C] rounded-xl font-bold transition-colors duration-300"
                  >
                    Edit
                  </button>
                  <button
                    onClick={(e) => handleDelete(e, item.id)}
                    className="delete px-4 py-2 bg-[#6A9AB0] hover:bg-[#5c89a0] text-[#FCFAEE] rounded-xl font-bold transition-colors duration-300"
                  >
                    Delete
                  </button>
                </div>
              </div>
            )
          );
        })}
      </div>
    </>
  );
}

export default App;

